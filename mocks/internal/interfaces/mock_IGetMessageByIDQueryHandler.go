// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interfaces

import (
	"context"

	"github.com/arielsrv/fxf/internal/features/messages/dtos"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIGetMessageByIDQueryHandler creates a new instance of MockIGetMessageByIDQueryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIGetMessageByIDQueryHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIGetMessageByIDQueryHandler {
	mock := &MockIGetMessageByIDQueryHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIGetMessageByIDQueryHandler is an autogenerated mock type for the IGetMessageByIDQueryHandler type
type MockIGetMessageByIDQueryHandler struct {
	mock.Mock
}

type MockIGetMessageByIDQueryHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIGetMessageByIDQueryHandler) EXPECT() *MockIGetMessageByIDQueryHandler_Expecter {
	return &MockIGetMessageByIDQueryHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockIGetMessageByIDQueryHandler
func (_mock *MockIGetMessageByIDQueryHandler) Handle(ctx context.Context, query *dtos.GetMessageByIDQuery) (*dtos.GetMessageByIDQueryResponse, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *dtos.GetMessageByIDQueryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dtos.GetMessageByIDQuery) (*dtos.GetMessageByIDQueryResponse, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dtos.GetMessageByIDQuery) *dtos.GetMessageByIDQueryResponse); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GetMessageByIDQueryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dtos.GetMessageByIDQuery) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIGetMessageByIDQueryHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockIGetMessageByIDQueryHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - query *dtos.GetMessageByIDQuery
func (_e *MockIGetMessageByIDQueryHandler_Expecter) Handle(ctx interface{}, query interface{}) *MockIGetMessageByIDQueryHandler_Handle_Call {
	return &MockIGetMessageByIDQueryHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, query)}
}

func (_c *MockIGetMessageByIDQueryHandler_Handle_Call) Run(run func(ctx context.Context, query *dtos.GetMessageByIDQuery)) *MockIGetMessageByIDQueryHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dtos.GetMessageByIDQuery
		if args[1] != nil {
			arg1 = args[1].(*dtos.GetMessageByIDQuery)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIGetMessageByIDQueryHandler_Handle_Call) Return(getMessageByIDQueryResponse *dtos.GetMessageByIDQueryResponse, err error) *MockIGetMessageByIDQueryHandler_Handle_Call {
	_c.Call.Return(getMessageByIDQueryResponse, err)
	return _c
}

func (_c *MockIGetMessageByIDQueryHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, query *dtos.GetMessageByIDQuery) (*dtos.GetMessageByIDQueryResponse, error)) *MockIGetMessageByIDQueryHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}
