// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/arielsrv/fxf/internal/features/messages/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIMessageRepository creates a new instance of MockIMessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMessageRepository {
	mock := &MockIMessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMessageRepository is an autogenerated mock type for the IMessageRepository type
type MockIMessageRepository struct {
	mock.Mock
}

type MockIMessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMessageRepository) EXPECT() *MockIMessageRepository_Expecter {
	return &MockIMessageRepository_Expecter{mock: &_m.Mock}
}

// CreateMessage provides a mock function for the type MockIMessageRepository
func (_mock *MockIMessageRepository) CreateMessage(ctx context.Context, message *models.Message) (*models.Message, error) {
	ret := _mock.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 *models.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Message) (*models.Message, error)); ok {
		return returnFunc(ctx, message)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Message) *models.Message); ok {
		r0 = returnFunc(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.Message) error); ok {
		r1 = returnFunc(ctx, message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIMessageRepository_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type MockIMessageRepository_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *models.Message
func (_e *MockIMessageRepository_Expecter) CreateMessage(ctx interface{}, message interface{}) *MockIMessageRepository_CreateMessage_Call {
	return &MockIMessageRepository_CreateMessage_Call{Call: _e.mock.On("CreateMessage", ctx, message)}
}

func (_c *MockIMessageRepository_CreateMessage_Call) Run(run func(ctx context.Context, message *models.Message)) *MockIMessageRepository_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Message
		if args[1] != nil {
			arg1 = args[1].(*models.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIMessageRepository_CreateMessage_Call) Return(message1 *models.Message, err error) *MockIMessageRepository_CreateMessage_Call {
	_c.Call.Return(message1, err)
	return _c
}

func (_c *MockIMessageRepository_CreateMessage_Call) RunAndReturn(run func(ctx context.Context, message *models.Message) (*models.Message, error)) *MockIMessageRepository_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageByID provides a mock function for the type MockIMessageRepository
func (_mock *MockIMessageRepository) GetMessageByID(ctx context.Context, id uuid.UUID) (*models.Message, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageByID")
	}

	var r0 *models.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Message, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Message); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIMessageRepository_GetMessageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageByID'
type MockIMessageRepository_GetMessageByID_Call struct {
	*mock.Call
}

// GetMessageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIMessageRepository_Expecter) GetMessageByID(ctx interface{}, id interface{}) *MockIMessageRepository_GetMessageByID_Call {
	return &MockIMessageRepository_GetMessageByID_Call{Call: _e.mock.On("GetMessageByID", ctx, id)}
}

func (_c *MockIMessageRepository_GetMessageByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIMessageRepository_GetMessageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIMessageRepository_GetMessageByID_Call) Return(message *models.Message, err error) *MockIMessageRepository_GetMessageByID_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockIMessageRepository_GetMessageByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Message, error)) *MockIMessageRepository_GetMessageByID_Call {
	_c.Call.Return(run)
	return _c
}
