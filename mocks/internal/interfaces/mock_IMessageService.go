// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interfaces

import (
	"context"

	"github.com/arielsrv/fxf/internal/features/messages/dtos"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIMessageService creates a new instance of MockIMessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMessageService {
	mock := &MockIMessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMessageService is an autogenerated mock type for the IMessageService type
type MockIMessageService struct {
	mock.Mock
}

type MockIMessageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMessageService) EXPECT() *MockIMessageService_Expecter {
	return &MockIMessageService_Expecter{mock: &_m.Mock}
}

// CreateMessage provides a mock function for the type MockIMessageService
func (_mock *MockIMessageService) CreateMessage(ctx context.Context, cmd *dtos.CreateMessageCommand) (*dtos.CreateMessageCommandResponse, error) {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 *dtos.CreateMessageCommandResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dtos.CreateMessageCommand) (*dtos.CreateMessageCommandResponse, error)); ok {
		return returnFunc(ctx, cmd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dtos.CreateMessageCommand) *dtos.CreateMessageCommandResponse); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CreateMessageCommandResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dtos.CreateMessageCommand) error); ok {
		r1 = returnFunc(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIMessageService_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type MockIMessageService_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd *dtos.CreateMessageCommand
func (_e *MockIMessageService_Expecter) CreateMessage(ctx interface{}, cmd interface{}) *MockIMessageService_CreateMessage_Call {
	return &MockIMessageService_CreateMessage_Call{Call: _e.mock.On("CreateMessage", ctx, cmd)}
}

func (_c *MockIMessageService_CreateMessage_Call) Run(run func(ctx context.Context, cmd *dtos.CreateMessageCommand)) *MockIMessageService_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dtos.CreateMessageCommand
		if args[1] != nil {
			arg1 = args[1].(*dtos.CreateMessageCommand)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIMessageService_CreateMessage_Call) Return(createMessageCommandResponse *dtos.CreateMessageCommandResponse, err error) *MockIMessageService_CreateMessage_Call {
	_c.Call.Return(createMessageCommandResponse, err)
	return _c
}

func (_c *MockIMessageService_CreateMessage_Call) RunAndReturn(run func(ctx context.Context, cmd *dtos.CreateMessageCommand) (*dtos.CreateMessageCommandResponse, error)) *MockIMessageService_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageByID provides a mock function for the type MockIMessageService
func (_mock *MockIMessageService) GetMessageByID(ctx context.Context, query *dtos.GetMessageByIDQuery) (*dtos.GetMessageByIDQueryResponse, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageByID")
	}

	var r0 *dtos.GetMessageByIDQueryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dtos.GetMessageByIDQuery) (*dtos.GetMessageByIDQueryResponse, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dtos.GetMessageByIDQuery) *dtos.GetMessageByIDQueryResponse); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GetMessageByIDQueryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dtos.GetMessageByIDQuery) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIMessageService_GetMessageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageByID'
type MockIMessageService_GetMessageByID_Call struct {
	*mock.Call
}

// GetMessageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - query *dtos.GetMessageByIDQuery
func (_e *MockIMessageService_Expecter) GetMessageByID(ctx interface{}, query interface{}) *MockIMessageService_GetMessageByID_Call {
	return &MockIMessageService_GetMessageByID_Call{Call: _e.mock.On("GetMessageByID", ctx, query)}
}

func (_c *MockIMessageService_GetMessageByID_Call) Run(run func(ctx context.Context, query *dtos.GetMessageByIDQuery)) *MockIMessageService_GetMessageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dtos.GetMessageByIDQuery
		if args[1] != nil {
			arg1 = args[1].(*dtos.GetMessageByIDQuery)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIMessageService_GetMessageByID_Call) Return(getMessageByIDQueryResponse *dtos.GetMessageByIDQueryResponse, err error) *MockIMessageService_GetMessageByID_Call {
	_c.Call.Return(getMessageByIDQueryResponse, err)
	return _c
}

func (_c *MockIMessageService_GetMessageByID_Call) RunAndReturn(run func(ctx context.Context, query *dtos.GetMessageByIDQuery) (*dtos.GetMessageByIDQueryResponse, error)) *MockIMessageService_GetMessageByID_Call {
	_c.Call.Return(run)
	return _c
}
